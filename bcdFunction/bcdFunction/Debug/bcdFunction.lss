
bcdFunction.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ced  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bf4  00000000  00000000  00000f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000313  00000000  00000000  00001b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001e90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000561  00000000  00000000  00001ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000af  00000000  00000000  00002441  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000024f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	2c d0       	rcall	.+88     	; 0x14e <main>
  f6:	56 c0       	rjmp	.+172    	; 0x1a4 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <fizzbuzz>:
uint8_t* chartobcd(const char *timestring){
	
	/* Time Format HHMMSS */ 
}

void fizzbuzz(uint16_t number){
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ec 01       	movw	r28, r24
	for(int i = 0; i < number; i++){
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	1e c0       	rjmp	.+60     	; 0x142 <fizzbuzz+0x48>
		if(!(i % 3)){
 106:	c9 01       	movw	r24, r18
 108:	63 e0       	ldi	r22, 0x03	; 3
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	24 d0       	rcall	.+72     	; 0x156 <__divmodhi4>
 10e:	fc 01       	movw	r30, r24
 110:	89 2b       	or	r24, r25
 112:	21 f4       	brne	.+8      	; 0x11c <fizzbuzz+0x22>
			//print Fizz
			PORTB |= (1 << PB1);
 114:	85 b1       	in	r24, 0x05	; 5
 116:	82 60       	ori	r24, 0x02	; 2
 118:	85 b9       	out	0x05, r24	; 5
 11a:	11 c0       	rjmp	.+34     	; 0x13e <fizzbuzz+0x44>
		}else if(!(i % 5)){
 11c:	c9 01       	movw	r24, r18
 11e:	65 e0       	ldi	r22, 0x05	; 5
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	19 d0       	rcall	.+50     	; 0x156 <__divmodhi4>
 124:	00 97       	sbiw	r24, 0x00	; 0
 126:	21 f4       	brne	.+8      	; 0x130 <fizzbuzz+0x36>
			PORTB |= (1 << PB1);
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	85 b9       	out	0x05, r24	; 5
 12e:	07 c0       	rjmp	.+14     	; 0x13e <fizzbuzz+0x44>
		}else if(!(i % 3) && (i % 5)){
 130:	ef 2b       	or	r30, r31
 132:	29 f4       	brne	.+10     	; 0x13e <fizzbuzz+0x44>
 134:	89 2b       	or	r24, r25
 136:	19 f0       	breq	.+6      	; 0x13e <fizzbuzz+0x44>
			PORTB |= (1 << PB1);
 138:	85 b1       	in	r24, 0x05	; 5
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	85 b9       	out	0x05, r24	; 5
	
	/* Time Format HHMMSS */ 
}

void fizzbuzz(uint16_t number){
	for(int i = 0; i < number; i++){
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	2c 17       	cp	r18, r28
 144:	3d 07       	cpc	r19, r29
 146:	f8 f2       	brcs	.-66     	; 0x106 <fizzbuzz+0xc>
			PORTB |= (1 << PB1);
		}else if(!(i % 3) && (i % 5)){
			PORTB |= (1 << PB1);
		}
	}	
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <main>:
int main(void)
{
    /* Replace with your application code */
//	const char timeVar[] = {"095519"};
//	chartobcd(timeVar);
	fizzbuzz(65000);
 14e:	88 ee       	ldi	r24, 0xE8	; 232
 150:	9d ef       	ldi	r25, 0xFD	; 253
 152:	d3 df       	rcall	.-90     	; 0xfa <fizzbuzz>
 154:	ff cf       	rjmp	.-2      	; 0x154 <main+0x6>

00000156 <__divmodhi4>:
 156:	97 fb       	bst	r25, 7
 158:	07 2e       	mov	r0, r23
 15a:	16 f4       	brtc	.+4      	; 0x160 <__divmodhi4+0xa>
 15c:	00 94       	com	r0
 15e:	06 d0       	rcall	.+12     	; 0x16c <__divmodhi4_neg1>
 160:	77 fd       	sbrc	r23, 7
 162:	08 d0       	rcall	.+16     	; 0x174 <__divmodhi4_neg2>
 164:	0b d0       	rcall	.+22     	; 0x17c <__udivmodhi4>
 166:	07 fc       	sbrc	r0, 7
 168:	05 d0       	rcall	.+10     	; 0x174 <__divmodhi4_neg2>
 16a:	3e f4       	brtc	.+14     	; 0x17a <__divmodhi4_exit>

0000016c <__divmodhi4_neg1>:
 16c:	90 95       	com	r25
 16e:	81 95       	neg	r24
 170:	9f 4f       	sbci	r25, 0xFF	; 255
 172:	08 95       	ret

00000174 <__divmodhi4_neg2>:
 174:	70 95       	com	r23
 176:	61 95       	neg	r22
 178:	7f 4f       	sbci	r23, 0xFF	; 255

0000017a <__divmodhi4_exit>:
 17a:	08 95       	ret

0000017c <__udivmodhi4>:
 17c:	aa 1b       	sub	r26, r26
 17e:	bb 1b       	sub	r27, r27
 180:	51 e1       	ldi	r21, 0x11	; 17
 182:	07 c0       	rjmp	.+14     	; 0x192 <__udivmodhi4_ep>

00000184 <__udivmodhi4_loop>:
 184:	aa 1f       	adc	r26, r26
 186:	bb 1f       	adc	r27, r27
 188:	a6 17       	cp	r26, r22
 18a:	b7 07       	cpc	r27, r23
 18c:	10 f0       	brcs	.+4      	; 0x192 <__udivmodhi4_ep>
 18e:	a6 1b       	sub	r26, r22
 190:	b7 0b       	sbc	r27, r23

00000192 <__udivmodhi4_ep>:
 192:	88 1f       	adc	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	5a 95       	dec	r21
 198:	a9 f7       	brne	.-22     	; 0x184 <__udivmodhi4_loop>
 19a:	80 95       	com	r24
 19c:	90 95       	com	r25
 19e:	bc 01       	movw	r22, r24
 1a0:	cd 01       	movw	r24, r26
 1a2:	08 95       	ret

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
