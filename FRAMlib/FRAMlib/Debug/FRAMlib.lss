
FRAMlib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000270  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f73  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b86  00000000  00000000  00001347  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000583  00000000  00000000  00001ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00002450  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000055d  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ad  00000000  00000000  00002acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002c7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	5b c0       	rjmp	.+182    	; 0xbc <__bad_interrupt>
   6:	00 00       	nop
   8:	59 c0       	rjmp	.+178    	; 0xbc <__bad_interrupt>
   a:	00 00       	nop
   c:	57 c0       	rjmp	.+174    	; 0xbc <__bad_interrupt>
   e:	00 00       	nop
  10:	55 c0       	rjmp	.+170    	; 0xbc <__bad_interrupt>
  12:	00 00       	nop
  14:	53 c0       	rjmp	.+166    	; 0xbc <__bad_interrupt>
  16:	00 00       	nop
  18:	51 c0       	rjmp	.+162    	; 0xbc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4f c0       	rjmp	.+158    	; 0xbc <__bad_interrupt>
  1e:	00 00       	nop
  20:	4d c0       	rjmp	.+154    	; 0xbc <__bad_interrupt>
  22:	00 00       	nop
  24:	4b c0       	rjmp	.+150    	; 0xbc <__bad_interrupt>
  26:	00 00       	nop
  28:	49 c0       	rjmp	.+146    	; 0xbc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	47 c0       	rjmp	.+142    	; 0xbc <__bad_interrupt>
  2e:	00 00       	nop
  30:	45 c0       	rjmp	.+138    	; 0xbc <__bad_interrupt>
  32:	00 00       	nop
  34:	43 c0       	rjmp	.+134    	; 0xbc <__bad_interrupt>
  36:	00 00       	nop
  38:	41 c0       	rjmp	.+130    	; 0xbc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3f c0       	rjmp	.+126    	; 0xbc <__bad_interrupt>
  3e:	00 00       	nop
  40:	3d c0       	rjmp	.+122    	; 0xbc <__bad_interrupt>
  42:	00 00       	nop
  44:	3b c0       	rjmp	.+118    	; 0xbc <__bad_interrupt>
  46:	00 00       	nop
  48:	39 c0       	rjmp	.+114    	; 0xbc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	37 c0       	rjmp	.+110    	; 0xbc <__bad_interrupt>
  4e:	00 00       	nop
  50:	35 c0       	rjmp	.+106    	; 0xbc <__bad_interrupt>
  52:	00 00       	nop
  54:	33 c0       	rjmp	.+102    	; 0xbc <__bad_interrupt>
  56:	00 00       	nop
  58:	31 c0       	rjmp	.+98     	; 0xbc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2f c0       	rjmp	.+94     	; 0xbc <__bad_interrupt>
  5e:	00 00       	nop
  60:	2d c0       	rjmp	.+90     	; 0xbc <__bad_interrupt>
  62:	00 00       	nop
  64:	2b c0       	rjmp	.+86     	; 0xbc <__bad_interrupt>
  66:	00 00       	nop
  68:	29 c0       	rjmp	.+82     	; 0xbc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	27 c0       	rjmp	.+78     	; 0xbc <__bad_interrupt>
  6e:	00 00       	nop
  70:	25 c0       	rjmp	.+74     	; 0xbc <__bad_interrupt>
  72:	00 00       	nop
  74:	23 c0       	rjmp	.+70     	; 0xbc <__bad_interrupt>
  76:	00 00       	nop
  78:	21 c0       	rjmp	.+66     	; 0xbc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1f c0       	rjmp	.+62     	; 0xbc <__bad_interrupt>
  7e:	00 00       	nop
  80:	1d c0       	rjmp	.+58     	; 0xbc <__bad_interrupt>
  82:	00 00       	nop
  84:	1b c0       	rjmp	.+54     	; 0xbc <__bad_interrupt>
  86:	00 00       	nop
  88:	19 c0       	rjmp	.+50     	; 0xbc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	17 c0       	rjmp	.+46     	; 0xbc <__bad_interrupt>
  8e:	00 00       	nop
  90:	15 c0       	rjmp	.+42     	; 0xbc <__bad_interrupt>
  92:	00 00       	nop
  94:	13 c0       	rjmp	.+38     	; 0xbc <__bad_interrupt>
  96:	00 00       	nop
  98:	11 c0       	rjmp	.+34     	; 0xbc <__bad_interrupt>
  9a:	00 00       	nop
  9c:	0f c0       	rjmp	.+30     	; 0xbc <__bad_interrupt>
  9e:	00 00       	nop
  a0:	0d c0       	rjmp	.+26     	; 0xbc <__bad_interrupt>
  a2:	00 00       	nop
  a4:	0b c0       	rjmp	.+22     	; 0xbc <__bad_interrupt>
  a6:	00 00       	nop
  a8:	09 c0       	rjmp	.+18     	; 0xbc <__bad_interrupt>
	...

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	02 d0       	rcall	.+4      	; 0xbe <main>
  ba:	d8 c0       	rjmp	.+432    	; 0x26c <_exit>

000000bc <__bad_interrupt>:
  bc:	a1 cf       	rjmp	.-190    	; 0x0 <__vectors>

000000be <main>:

int main(void)
{
    /* Replace with your application code */
	volatile uint8_t retval; 
	spi_init();
  be:	bb d0       	rcall	.+374    	; 0x236 <spi_init>
	
	fram_id();
  c0:	09 d0       	rcall	.+18     	; 0xd4 <fram_id>
	fram_status();
  c2:	80 d0       	rcall	.+256    	; 0x1c4 <fram_status>
  c4:	65 e5       	ldi	r22, 0x55	; 85
	fram_writeByte(0x0001, 0x55);
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	a1 d0       	rcall	.+322    	; 0x20e <fram_writeByte>
	fram_readByte(0x0001);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	8c d0       	rcall	.+280    	; 0x1ea <fram_readByte>
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <main+0x14>

000000d4 <fram_id>:
  d4:	cf 93       	push	r28
product Id2 0x02 
Confirms spi communication with the FRAM IC is working correctly
Returns 0 for success
Returns 1 for failure 
 */
uint8_t fram_id(void){
  d6:	df 93       	push	r29
  d8:	00 d0       	rcall	.+0      	; 0xda <fram_id+0x6>
  da:	00 d0       	rcall	.+0      	; 0xdc <fram_id+0x8>
  dc:	1f 92       	push	r1
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t retval;
	volatile uint32_t checkval = 0x00000000; 
  e2:	1a 82       	std	Y+2, r1	; 0x02
  e4:	1b 82       	std	Y+3, r1	; 0x03
  e6:	1c 82       	std	Y+4, r1	; 0x04
  e8:	1d 82       	std	Y+5, r1	; 0x05
	
	spi_CSLOW();
  ea:	b8 d0       	rcall	.+368    	; 0x25c <spi_CSLOW>
		retval = spi_send(FRAM_RDID);
  ec:	8f e9       	ldi	r24, 0x9F	; 159
  ee:	b0 d0       	rcall	.+352    	; 0x250 <spi_send>
  f0:	89 83       	std	Y+1, r24	; 0x01
		retval = spi_send(FRAM_RDID);
  f2:	8f e9       	ldi	r24, 0x9F	; 159
  f4:	ad d0       	rcall	.+346    	; 0x250 <spi_send>
  f6:	89 83       	std	Y+1, r24	; 0x01
  f8:	89 81       	ldd	r24, Y+1	; 0x01
		checkval |= ((uint32_t)retval << 24);
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	a0 e0       	ldi	r26, 0x00	; 0
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	b8 2f       	mov	r27, r24
 102:	aa 27       	eor	r26, r26
 104:	99 27       	eor	r25, r25
 106:	88 27       	eor	r24, r24
 108:	4a 81       	ldd	r20, Y+2	; 0x02
 10a:	5b 81       	ldd	r21, Y+3	; 0x03
 10c:	6c 81       	ldd	r22, Y+4	; 0x04
 10e:	7d 81       	ldd	r23, Y+5	; 0x05
 110:	84 2b       	or	r24, r20
 112:	95 2b       	or	r25, r21
 114:	a6 2b       	or	r26, r22
 116:	b7 2b       	or	r27, r23
 118:	8a 83       	std	Y+2, r24	; 0x02
 11a:	9b 83       	std	Y+3, r25	; 0x03
 11c:	ac 83       	std	Y+4, r26	; 0x04
 11e:	bd 83       	std	Y+5, r27	; 0x05
		retval = spi_send(FRAM_RDID);
 120:	8f e9       	ldi	r24, 0x9F	; 159
 122:	96 d0       	rcall	.+300    	; 0x250 <spi_send>
 124:	89 83       	std	Y+1, r24	; 0x01
 126:	89 81       	ldd	r24, Y+1	; 0x01
		checkval |= ((uint32_t)retval << 16);
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	a0 e0       	ldi	r26, 0x00	; 0
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	dc 01       	movw	r26, r24
 130:	99 27       	eor	r25, r25
 132:	88 27       	eor	r24, r24
 134:	4a 81       	ldd	r20, Y+2	; 0x02
 136:	5b 81       	ldd	r21, Y+3	; 0x03
 138:	6c 81       	ldd	r22, Y+4	; 0x04
 13a:	7d 81       	ldd	r23, Y+5	; 0x05
 13c:	84 2b       	or	r24, r20
 13e:	95 2b       	or	r25, r21
 140:	a6 2b       	or	r26, r22
 142:	b7 2b       	or	r27, r23
 144:	8a 83       	std	Y+2, r24	; 0x02
 146:	9b 83       	std	Y+3, r25	; 0x03
 148:	ac 83       	std	Y+4, r26	; 0x04
 14a:	bd 83       	std	Y+5, r27	; 0x05
		retval = spi_send(FRAM_RDID);
 14c:	8f e9       	ldi	r24, 0x9F	; 159
 14e:	80 d0       	rcall	.+256    	; 0x250 <spi_send>
 150:	89 83       	std	Y+1, r24	; 0x01
 152:	89 81       	ldd	r24, Y+1	; 0x01
		checkval |= (retval << 8);
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	98 2f       	mov	r25, r24
 158:	88 27       	eor	r24, r24
 15a:	4a 81       	ldd	r20, Y+2	; 0x02
 15c:	5b 81       	ldd	r21, Y+3	; 0x03
 15e:	6c 81       	ldd	r22, Y+4	; 0x04
 160:	7d 81       	ldd	r23, Y+5	; 0x05
 162:	09 2e       	mov	r0, r25
 164:	00 0c       	add	r0, r0
 166:	aa 0b       	sbc	r26, r26
 168:	bb 0b       	sbc	r27, r27
 16a:	84 2b       	or	r24, r20
 16c:	95 2b       	or	r25, r21
 16e:	a6 2b       	or	r26, r22
 170:	b7 2b       	or	r27, r23
 172:	8a 83       	std	Y+2, r24	; 0x02
 174:	9b 83       	std	Y+3, r25	; 0x03
 176:	ac 83       	std	Y+4, r26	; 0x04
 178:	bd 83       	std	Y+5, r27	; 0x05
		retval = spi_send(FRAM_RDID);
 17a:	8f e9       	ldi	r24, 0x9F	; 159
 17c:	69 d0       	rcall	.+210    	; 0x250 <spi_send>
 17e:	89 83       	std	Y+1, r24	; 0x01
 180:	29 81       	ldd	r18, Y+1	; 0x01
		checkval |= (retval);
 182:	8a 81       	ldd	r24, Y+2	; 0x02
 184:	9b 81       	ldd	r25, Y+3	; 0x03
 186:	ac 81       	ldd	r26, Y+4	; 0x04
 188:	bd 81       	ldd	r27, Y+5	; 0x05
 18a:	82 2b       	or	r24, r18
 18c:	8a 83       	std	Y+2, r24	; 0x02
 18e:	9b 83       	std	Y+3, r25	; 0x03
 190:	ac 83       	std	Y+4, r26	; 0x04
		retval = spi_send(FRAM_RDID);
 192:	bd 83       	std	Y+5, r27	; 0x05
 194:	8f e9       	ldi	r24, 0x9F	; 159
 196:	5c d0       	rcall	.+184    	; 0x250 <spi_send>
 198:	89 83       	std	Y+1, r24	; 0x01
	spi_CSHIGH();
 19a:	64 d0       	rcall	.+200    	; 0x264 <spi_CSHIGH>
 19c:	8a 81       	ldd	r24, Y+2	; 0x02
	
	if(checkval == 0x047f0302){
 19e:	9b 81       	ldd	r25, Y+3	; 0x03
 1a0:	ac 81       	ldd	r26, Y+4	; 0x04
 1a2:	bd 81       	ldd	r27, Y+5	; 0x05
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	93 40       	sbci	r25, 0x03	; 3
 1a8:	af 47       	sbci	r26, 0x7F	; 127
 1aa:	b4 40       	sbci	r27, 0x04	; 4
 1ac:	11 f4       	brne	.+4      	; 0x1b2 <fram_id+0xde>
 1ae:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <fram_id+0xe0>
 1b2:	81 e0       	ldi	r24, 0x01	; 1
	}else{
		return 1;
 1b4:	0f 90       	pop	r0
	}
}
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <fram_status>:
 1c4:	cf 93       	push	r28
/* Fram Status Function
Returns value from the Status register
*/
uint8_t fram_status(void){
 1c6:	df 93       	push	r29
 1c8:	1f 92       	push	r1
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t retval = 0;
 1ce:	19 82       	std	Y+1, r1	; 0x01
	spi_CSLOW();
 1d0:	45 d0       	rcall	.+138    	; 0x25c <spi_CSLOW>
		retval = spi_send(FRAM_RDSR);
 1d2:	85 e0       	ldi	r24, 0x05	; 5
 1d4:	3d d0       	rcall	.+122    	; 0x250 <spi_send>
 1d6:	89 83       	std	Y+1, r24	; 0x01
		retval = spi_send(FRAM_RDSR);
 1d8:	85 e0       	ldi	r24, 0x05	; 5
 1da:	3a d0       	rcall	.+116    	; 0x250 <spi_send>
 1dc:	89 83       	std	Y+1, r24	; 0x01
	spi_CSHIGH();
 1de:	42 d0       	rcall	.+132    	; 0x264 <spi_CSHIGH>
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
	return retval;
 1e2:	0f 90       	pop	r0
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <fram_readByte>:
 1ea:	cf 93       	push	r28

/* NEEDS WORK */
uint8_t fram_readByte(uint16_t address){
 1ec:	c8 2f       	mov	r28, r24
	uint8_t retval = 0;
	spi_CSLOW();
 1ee:	36 d0       	rcall	.+108    	; 0x25c <spi_CSLOW>
		//spi_send(FRAM_WRDI);
		spi_send(FRAM_READ);
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	2e d0       	rcall	.+92     	; 0x250 <spi_send>
		//Address is 16bits long
		spi_send((address << 8));
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	2c d0       	rcall	.+88     	; 0x250 <spi_send>
		spi_send(address);
 1f8:	8c 2f       	mov	r24, r28
 1fa:	2a d0       	rcall	.+84     	; 0x250 <spi_send>
		retval = spi_send(SPI_DUMMY);
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	28 d0       	rcall	.+80     	; 0x250 <spi_send>
		retval = spi_send(SPI_DUMMY);
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	26 d0       	rcall	.+76     	; 0x250 <spi_send>
 204:	c8 2f       	mov	r28, r24
 206:	2e d0       	rcall	.+92     	; 0x264 <spi_CSHIGH>
	spi_CSHIGH();
 208:	8c 2f       	mov	r24, r28
 20a:	cf 91       	pop	r28
	
	return retval;
}
 20c:	08 95       	ret

0000020e <fram_writeByte>:
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29

/* NEEDS WORK */
uint8_t fram_writeByte(uint16_t address, uint8_t udata)
{
 212:	d8 2f       	mov	r29, r24
 214:	c6 2f       	mov	r28, r22
	spi_CSLOW();
 216:	22 d0       	rcall	.+68     	; 0x25c <spi_CSLOW>
		spi_send(FRAM_WREN);
 218:	86 e0       	ldi	r24, 0x06	; 6
 21a:	1a d0       	rcall	.+52     	; 0x250 <spi_send>
		spi_send(FRAM_WRITE);
 21c:	82 e0       	ldi	r24, 0x02	; 2
 21e:	18 d0       	rcall	.+48     	; 0x250 <spi_send>
		spi_send((address << 8));
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	16 d0       	rcall	.+44     	; 0x250 <spi_send>
		spi_send(address);
 224:	8d 2f       	mov	r24, r29
 226:	14 d0       	rcall	.+40     	; 0x250 <spi_send>
		spi_send(udata);
 228:	8c 2f       	mov	r24, r28
 22a:	12 d0       	rcall	.+36     	; 0x250 <spi_send>
 22c:	1b d0       	rcall	.+54     	; 0x264 <spi_CSHIGH>
	spi_CSHIGH(); 
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	df 91       	pop	r29
	
	return 0;
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <spi_init>:
 236:	84 b1       	in	r24, 0x04	; 4
 238:	86 62       	ori	r24, 0x26	; 38
uint8_t spi_receive(void){
	SPDR = 0xFF;
	while(!(SPSR & (1 << SPIF)))
	;
	return SPDR;
}
 23a:	84 b9       	out	0x04, r24	; 4
 23c:	84 b1       	in	r24, 0x04	; 4
 23e:	87 7f       	andi	r24, 0xF7	; 247
 240:	84 b9       	out	0x04, r24	; 4
 242:	8c b5       	in	r24, 0x2c	; 44
 244:	81 65       	ori	r24, 0x51	; 81
 246:	8c bd       	out	0x2c, r24	; 44
 248:	85 b1       	in	r24, 0x05	; 5
 24a:	80 62       	ori	r24, 0x20	; 32
 24c:	85 b9       	out	0x05, r24	; 5
 24e:	08 95       	ret

00000250 <spi_send>:
 250:	8e bd       	out	0x2e, r24	; 46
 252:	0d b4       	in	r0, 0x2d	; 45
 254:	07 fe       	sbrs	r0, 7
 256:	fd cf       	rjmp	.-6      	; 0x252 <spi_send+0x2>
 258:	8e b5       	in	r24, 0x2e	; 46
 25a:	08 95       	ret

0000025c <spi_CSLOW>:

void spi_CSLOW(void){
	SPI_PORT &= ~(1 << SPI_CS);
 25c:	85 b1       	in	r24, 0x05	; 5
 25e:	8f 7d       	andi	r24, 0xDF	; 223
 260:	85 b9       	out	0x05, r24	; 5
 262:	08 95       	ret

00000264 <spi_CSHIGH>:
}

void spi_CSHIGH(void){
	SPI_PORT |= (1 << SPI_CS);
 264:	85 b1       	in	r24, 0x05	; 5
 266:	80 62       	ori	r24, 0x20	; 32
 268:	85 b9       	out	0x05, r24	; 5
 26a:	08 95       	ret

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
