
FRAMlib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000334  000003a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000334  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001111  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bca  00000000  00000000  000015e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000651  00000000  00000000  000021ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  000027fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c8  00000000  00000000  00002970  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000038c  00000000  00000000  00002f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000032c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
  96:	00 00       	nop
  98:	1c c0       	rjmp	.+56     	; 0xd2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	1a c0       	rjmp	.+52     	; 0xd2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	18 c0       	rjmp	.+48     	; 0xd2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	16 c0       	rjmp	.+44     	; 0xd2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	14 c0       	rjmp	.+40     	; 0xd2 <__bad_interrupt>
	...

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e4 e3       	ldi	r30, 0x34	; 52
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a6 30       	cpi	r26, 0x06	; 6
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	02 d0       	rcall	.+4      	; 0xd4 <main>
  d0:	2f c1       	rjmp	.+606    	; 0x330 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <main>:
#include <util/delay.h>
#include "spi.h"
#include "MB85RS64V.h"

int main(void)
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	00 d0       	rcall	.+0      	; 0xda <main+0x6>
  da:	00 d0       	rcall	.+0      	; 0xdc <main+0x8>
  dc:	1f 92       	push	r1
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	volatile uint8_t retval; 
	spi_init();
  e2:	0b d1       	rcall	.+534    	; 0x2fa <spi_init>
	
	fram_id();
  e4:	19 d0       	rcall	.+50     	; 0x118 <fram_id>
	fram_status();
  e6:	90 d0       	rcall	.+288    	; 0x208 <fram_status>
  e8:	65 e5       	ldi	r22, 0x55	; 85
	fram_writeByte(0x0001, 0x55);
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	c4 d0       	rcall	.+392    	; 0x278 <fram_writeByte>
	fram_readByte(0x0001);
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	af d0       	rcall	.+350    	; 0x254 <fram_readByte>
  f6:	85 e0       	ldi	r24, 0x05	; 5
	uint8_t cmd[] = {0x11, 0x22, 0x33, 0x44, 0x55}; 
  f8:	e0 e0       	ldi	r30, 0x00	; 0
  fa:	f1 e0       	ldi	r31, 0x01	; 1
  fc:	de 01       	movw	r26, r28
  fe:	11 96       	adiw	r26, 0x01	; 1
 100:	01 90       	ld	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	8a 95       	dec	r24
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x2c>
 108:	45 e0       	ldi	r20, 0x05	; 5
	fram_write(0x0000, cmd, (sizeof(cmd) / sizeof(uint8_t)) );
 10a:	be 01       	movw	r22, r28
 10c:	6f 5f       	subi	r22, 0xFF	; 255
 10e:	7f 4f       	sbci	r23, 0xFF	; 255
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	c8 d0       	rcall	.+400    	; 0x2a6 <fram_write>
 116:	ff cf       	rjmp	.-2      	; 0x116 <main+0x42>

00000118 <fram_id>:
 118:	cf 93       	push	r28
* product Id2 0x02 
* @param
* @param Returns 0 for success
* @param Returns 1 for failure 
 */
uint8_t fram_id(void){
 11a:	df 93       	push	r29
 11c:	00 d0       	rcall	.+0      	; 0x11e <fram_id+0x6>
 11e:	00 d0       	rcall	.+0      	; 0x120 <fram_id+0x8>
 120:	1f 92       	push	r1
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t retval;
	volatile uint32_t checkval = 0x00000000; 
 126:	1a 82       	std	Y+2, r1	; 0x02
 128:	1b 82       	std	Y+3, r1	; 0x03
 12a:	1c 82       	std	Y+4, r1	; 0x04
 12c:	1d 82       	std	Y+5, r1	; 0x05
	
	spi_CSLOW();
 12e:	f8 d0       	rcall	.+496    	; 0x320 <spi_CSLOW>
		retval = spi_send(FRAM_RDID);
 130:	8f e9       	ldi	r24, 0x9F	; 159
 132:	f0 d0       	rcall	.+480    	; 0x314 <spi_send>
 134:	89 83       	std	Y+1, r24	; 0x01
		retval = spi_send(FRAM_RDID);
 136:	8f e9       	ldi	r24, 0x9F	; 159
 138:	ed d0       	rcall	.+474    	; 0x314 <spi_send>
 13a:	89 83       	std	Y+1, r24	; 0x01
 13c:	89 81       	ldd	r24, Y+1	; 0x01
		checkval |= ((uint32_t)retval << 24);
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	a0 e0       	ldi	r26, 0x00	; 0
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	b8 2f       	mov	r27, r24
 146:	aa 27       	eor	r26, r26
 148:	99 27       	eor	r25, r25
 14a:	88 27       	eor	r24, r24
 14c:	4a 81       	ldd	r20, Y+2	; 0x02
 14e:	5b 81       	ldd	r21, Y+3	; 0x03
 150:	6c 81       	ldd	r22, Y+4	; 0x04
 152:	7d 81       	ldd	r23, Y+5	; 0x05
 154:	84 2b       	or	r24, r20
 156:	95 2b       	or	r25, r21
 158:	a6 2b       	or	r26, r22
 15a:	b7 2b       	or	r27, r23
 15c:	8a 83       	std	Y+2, r24	; 0x02
 15e:	9b 83       	std	Y+3, r25	; 0x03
 160:	ac 83       	std	Y+4, r26	; 0x04
 162:	bd 83       	std	Y+5, r27	; 0x05
		retval = spi_send(FRAM_RDID);
 164:	8f e9       	ldi	r24, 0x9F	; 159
 166:	d6 d0       	rcall	.+428    	; 0x314 <spi_send>
 168:	89 83       	std	Y+1, r24	; 0x01
 16a:	89 81       	ldd	r24, Y+1	; 0x01
		checkval |= ((uint32_t)retval << 16);
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	dc 01       	movw	r26, r24
 174:	99 27       	eor	r25, r25
 176:	88 27       	eor	r24, r24
 178:	4a 81       	ldd	r20, Y+2	; 0x02
 17a:	5b 81       	ldd	r21, Y+3	; 0x03
 17c:	6c 81       	ldd	r22, Y+4	; 0x04
 17e:	7d 81       	ldd	r23, Y+5	; 0x05
 180:	84 2b       	or	r24, r20
 182:	95 2b       	or	r25, r21
 184:	a6 2b       	or	r26, r22
 186:	b7 2b       	or	r27, r23
 188:	8a 83       	std	Y+2, r24	; 0x02
 18a:	9b 83       	std	Y+3, r25	; 0x03
 18c:	ac 83       	std	Y+4, r26	; 0x04
 18e:	bd 83       	std	Y+5, r27	; 0x05
		retval = spi_send(FRAM_RDID);
 190:	8f e9       	ldi	r24, 0x9F	; 159
 192:	c0 d0       	rcall	.+384    	; 0x314 <spi_send>
 194:	89 83       	std	Y+1, r24	; 0x01
 196:	89 81       	ldd	r24, Y+1	; 0x01
		checkval |= (retval << 8);
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	98 2f       	mov	r25, r24
 19c:	88 27       	eor	r24, r24
 19e:	4a 81       	ldd	r20, Y+2	; 0x02
 1a0:	5b 81       	ldd	r21, Y+3	; 0x03
 1a2:	6c 81       	ldd	r22, Y+4	; 0x04
 1a4:	7d 81       	ldd	r23, Y+5	; 0x05
 1a6:	09 2e       	mov	r0, r25
 1a8:	00 0c       	add	r0, r0
 1aa:	aa 0b       	sbc	r26, r26
 1ac:	bb 0b       	sbc	r27, r27
 1ae:	84 2b       	or	r24, r20
 1b0:	95 2b       	or	r25, r21
 1b2:	a6 2b       	or	r26, r22
 1b4:	b7 2b       	or	r27, r23
 1b6:	8a 83       	std	Y+2, r24	; 0x02
 1b8:	9b 83       	std	Y+3, r25	; 0x03
 1ba:	ac 83       	std	Y+4, r26	; 0x04
 1bc:	bd 83       	std	Y+5, r27	; 0x05
		retval = spi_send(FRAM_RDID);
 1be:	8f e9       	ldi	r24, 0x9F	; 159
 1c0:	a9 d0       	rcall	.+338    	; 0x314 <spi_send>
 1c2:	89 83       	std	Y+1, r24	; 0x01
 1c4:	29 81       	ldd	r18, Y+1	; 0x01
		checkval |= (retval);
 1c6:	8a 81       	ldd	r24, Y+2	; 0x02
 1c8:	9b 81       	ldd	r25, Y+3	; 0x03
 1ca:	ac 81       	ldd	r26, Y+4	; 0x04
 1cc:	bd 81       	ldd	r27, Y+5	; 0x05
 1ce:	82 2b       	or	r24, r18
 1d0:	8a 83       	std	Y+2, r24	; 0x02
 1d2:	9b 83       	std	Y+3, r25	; 0x03
 1d4:	ac 83       	std	Y+4, r26	; 0x04
		retval = spi_send(FRAM_RDID);
 1d6:	bd 83       	std	Y+5, r27	; 0x05
 1d8:	8f e9       	ldi	r24, 0x9F	; 159
 1da:	9c d0       	rcall	.+312    	; 0x314 <spi_send>
 1dc:	89 83       	std	Y+1, r24	; 0x01
	spi_CSHIGH();
 1de:	a4 d0       	rcall	.+328    	; 0x328 <spi_CSHIGH>
 1e0:	8a 81       	ldd	r24, Y+2	; 0x02
	
	if(checkval == 0x047f0302){
 1e2:	9b 81       	ldd	r25, Y+3	; 0x03
 1e4:	ac 81       	ldd	r26, Y+4	; 0x04
 1e6:	bd 81       	ldd	r27, Y+5	; 0x05
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	93 40       	sbci	r25, 0x03	; 3
 1ec:	af 47       	sbci	r26, 0x7F	; 127
 1ee:	b4 40       	sbci	r27, 0x04	; 4
 1f0:	11 f4       	brne	.+4      	; 0x1f6 <fram_id+0xde>
 1f2:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
 1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <fram_id+0xe0>
 1f6:	81 e0       	ldi	r24, 0x01	; 1
	}else{
		return 1;
 1f8:	0f 90       	pop	r0
	}
}
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <fram_status>:
 208:	cf 93       	push	r28
/* Fram Status Function
Returns value from the Status register
*/
uint8_t fram_status(void){
 20a:	df 93       	push	r29
 20c:	1f 92       	push	r1
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t retval = 0;
 212:	19 82       	std	Y+1, r1	; 0x01
	
	spi_CSLOW();
 214:	85 d0       	rcall	.+266    	; 0x320 <spi_CSLOW>
		retval = spi_send(FRAM_RDSR);
 216:	85 e0       	ldi	r24, 0x05	; 5
 218:	7d d0       	rcall	.+250    	; 0x314 <spi_send>
 21a:	89 83       	std	Y+1, r24	; 0x01
		retval = spi_send(FRAM_RDSR);
 21c:	85 e0       	ldi	r24, 0x05	; 5
 21e:	7a d0       	rcall	.+244    	; 0x314 <spi_send>
 220:	89 83       	std	Y+1, r24	; 0x01
	spi_CSHIGH();
 222:	82 d0       	rcall	.+260    	; 0x328 <spi_CSHIGH>
 224:	89 81       	ldd	r24, Y+1	; 0x01
	
	return retval;
 226:	0f 90       	pop	r0
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <fram_WREN>:
 22e:	cf 93       	push	r28

uint8_t fram_WREN(void){
 230:	df 93       	push	r29
 232:	1f 92       	push	r1
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t retval = 0;
 238:	19 82       	std	Y+1, r1	; 0x01
	
	spi_CSLOW();
 23a:	72 d0       	rcall	.+228    	; 0x320 <spi_CSLOW>
		retval = spi_send(FRAM_WREN);
 23c:	86 e0       	ldi	r24, 0x06	; 6
 23e:	6a d0       	rcall	.+212    	; 0x314 <spi_send>
 240:	89 83       	std	Y+1, r24	; 0x01
		retval = spi_send(FRAM_RDSR);
 242:	85 e0       	ldi	r24, 0x05	; 5
 244:	67 d0       	rcall	.+206    	; 0x314 <spi_send>
 246:	89 83       	std	Y+1, r24	; 0x01
		//TODO: Check if write enabled
	spi_CSHIGH();
 248:	6f d0       	rcall	.+222    	; 0x328 <spi_CSHIGH>
 24a:	89 81       	ldd	r24, Y+1	; 0x01
	
	return retval;
 24c:	0f 90       	pop	r0
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <fram_readByte>:
 254:	cf 93       	push	r28

/* NEEDS WORK */
uint8_t fram_readByte(uint16_t address){
 256:	c8 2f       	mov	r28, r24
	uint8_t retval = 0;
	spi_CSLOW();
 258:	63 d0       	rcall	.+198    	; 0x320 <spi_CSLOW>
		//spi_send(FRAM_WRDI);
		spi_send(FRAM_READ);
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	5b d0       	rcall	.+182    	; 0x314 <spi_send>
		//Address is 16bits long
		spi_send((address << 8));
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	59 d0       	rcall	.+178    	; 0x314 <spi_send>
		spi_send(address);
 262:	8c 2f       	mov	r24, r28
 264:	57 d0       	rcall	.+174    	; 0x314 <spi_send>
		retval = spi_send(SPI_DUMMY);
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	55 d0       	rcall	.+170    	; 0x314 <spi_send>
		retval = spi_send(SPI_DUMMY);
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	53 d0       	rcall	.+166    	; 0x314 <spi_send>
 26e:	c8 2f       	mov	r28, r24
 270:	5b d0       	rcall	.+182    	; 0x328 <spi_CSHIGH>
	spi_CSHIGH();
 272:	8c 2f       	mov	r24, r28
 274:	cf 91       	pop	r28
	
	return retval;
}
 276:	08 95       	ret

00000278 <fram_writeByte>:
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29

/* NEEDS WORK */
uint8_t fram_writeByte(uint16_t address, uint8_t udata)
{
 27c:	d8 2f       	mov	r29, r24
 27e:	c6 2f       	mov	r28, r22
	uint8_t retval = 0;
	
	spi_CSLOW();
 280:	4f d0       	rcall	.+158    	; 0x320 <spi_CSLOW>
		retval = fram_WREN();
 282:	d5 df       	rcall	.-86     	; 0x22e <fram_WREN>
 284:	81 ff       	sbrs	r24, 1

		if(retval & 0x02){
 286:	0b c0       	rjmp	.+22     	; 0x29e <fram_writeByte+0x26>
			spi_send(FRAM_WRITE);
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	44 d0       	rcall	.+136    	; 0x314 <spi_send>
			spi_send((address << 8));
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	42 d0       	rcall	.+132    	; 0x314 <spi_send>
			spi_send(address);
 290:	8d 2f       	mov	r24, r29
 292:	40 d0       	rcall	.+128    	; 0x314 <spi_send>
			spi_send(udata);
 294:	8c 2f       	mov	r24, r28
 296:	3e d0       	rcall	.+124    	; 0x314 <spi_send>
 298:	47 d0       	rcall	.+142    	; 0x328 <spi_CSHIGH>
		}else{
			return 1;
		}
		
	spi_CSHIGH(); 
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	01 c0       	rjmp	.+2      	; 0x2a0 <fram_writeByte+0x28>
	
	return 0;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	df 91       	pop	r29
			spi_send(FRAM_WRITE);
			spi_send((address << 8));
			spi_send(address);
			spi_send(udata);
		}else{
			return 1;
 2a2:	cf 91       	pop	r28
		}
		
	spi_CSHIGH(); 
	
	return 0;
}
 2a4:	08 95       	ret

000002a6 <fram_write>:
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17

/**/
uint8_t fram_write(uint16_t address, uint8_t *udata, uint8_t nbytes){
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	c8 2f       	mov	r28, r24
 2b0:	8b 01       	movw	r16, r22
 2b2:	d4 2f       	mov	r29, r20
	uint8_t retval = 0;
	
	spi_CSLOW();
 2b4:	35 d0       	rcall	.+106    	; 0x320 <spi_CSLOW>
	
		retval = fram_WREN();
 2b6:	bb df       	rcall	.-138    	; 0x22e <fram_WREN>
 2b8:	81 ff       	sbrs	r24, 1
		if(retval & 0x02){
 2ba:	19 c0       	rjmp	.+50     	; 0x2ee <fram_write+0x48>
			
			spi_send(FRAM_WRITE);
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	2a d0       	rcall	.+84     	; 0x314 <spi_send>
			spi_send((address << 8));
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	28 d0       	rcall	.+80     	; 0x314 <spi_send>
			spi_send(address);
 2c4:	8c 2f       	mov	r24, r28
 2c6:	26 d0       	rcall	.+76     	; 0x314 <spi_send>
 2c8:	c0 e0       	ldi	r28, 0x00	; 0
			
			for(uint8_t i = 0; i < (nbytes - 1); i++){
 2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <fram_write+0x32>
				spi_send(udata[i]);
 2cc:	f8 01       	movw	r30, r16
 2ce:	ec 0f       	add	r30, r28
 2d0:	f1 1d       	adc	r31, r1
 2d2:	80 81       	ld	r24, Z
 2d4:	1f d0       	rcall	.+62     	; 0x314 <spi_send>
 2d6:	cf 5f       	subi	r28, 0xFF	; 255
			
			spi_send(FRAM_WRITE);
			spi_send((address << 8));
			spi_send(address);
			
			for(uint8_t i = 0; i < (nbytes - 1); i++){
 2d8:	2c 2f       	mov	r18, r28
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	8d 2f       	mov	r24, r29
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	28 17       	cp	r18, r24
 2e4:	39 07       	cpc	r19, r25
 2e6:	94 f3       	brlt	.-28     	; 0x2cc <fram_write+0x26>
				
			}else{
				return 1;
			}
		
	spi_CSHIGH();
 2e8:	1f d0       	rcall	.+62     	; 0x328 <spi_CSHIGH>
 2ea:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
 2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <fram_write+0x4a>
 2ee:	81 e0       	ldi	r24, 0x01	; 1
			for(uint8_t i = 0; i < (nbytes - 1); i++){
				spi_send(udata[i]);
				}
				
			}else{
				return 1;
 2f0:	df 91       	pop	r29
			}
		
	spi_CSHIGH();
	
	return 0;
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	08 95       	ret

000002fa <spi_init>:
 2fa:	84 b1       	in	r24, 0x04	; 4
 2fc:	86 62       	ori	r24, 0x26	; 38
 2fe:	84 b9       	out	0x04, r24	; 4
 300:	84 b1       	in	r24, 0x04	; 4
 302:	87 7f       	andi	r24, 0xF7	; 247
 304:	84 b9       	out	0x04, r24	; 4
 306:	8c b5       	in	r24, 0x2c	; 44
 308:	81 65       	ori	r24, 0x51	; 81
 30a:	8c bd       	out	0x2c, r24	; 44
 30c:	85 b1       	in	r24, 0x05	; 5
 30e:	80 62       	ori	r24, 0x20	; 32
 310:	85 b9       	out	0x05, r24	; 5
 312:	08 95       	ret

00000314 <spi_send>:
 314:	8e bd       	out	0x2e, r24	; 46
 316:	0d b4       	in	r0, 0x2d	; 45
 318:	07 fe       	sbrs	r0, 7
 31a:	fd cf       	rjmp	.-6      	; 0x316 <spi_send+0x2>
 31c:	8e b5       	in	r24, 0x2e	; 46
 31e:	08 95       	ret

00000320 <spi_CSLOW>:
 320:	85 b1       	in	r24, 0x05	; 5
 322:	8f 7d       	andi	r24, 0xDF	; 223
 324:	85 b9       	out	0x05, r24	; 5
 326:	08 95       	ret

00000328 <spi_CSHIGH>:
 328:	85 b1       	in	r24, 0x05	; 5
 32a:	80 62       	ori	r24, 0x20	; 32
 32c:	85 b9       	out	0x05, r24	; 5
 32e:	08 95       	ret

00000330 <_exit>:
 330:	f8 94       	cli

00000332 <__stop_program>:
 332:	ff cf       	rjmp	.-2      	; 0x332 <__stop_program>
