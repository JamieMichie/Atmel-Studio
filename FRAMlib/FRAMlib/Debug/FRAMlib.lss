
FRAMlib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000116e  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bdd  00000000  00000000  000015a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000067f  00000000  00000000  00002183  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  00002804  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000577  00000000  00000000  00002980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000388  00000000  00000000  00002ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000327f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	5b c0       	rjmp	.+182    	; 0xbc <__bad_interrupt>
   6:	00 00       	nop
   8:	59 c0       	rjmp	.+178    	; 0xbc <__bad_interrupt>
   a:	00 00       	nop
   c:	57 c0       	rjmp	.+174    	; 0xbc <__bad_interrupt>
   e:	00 00       	nop
  10:	55 c0       	rjmp	.+170    	; 0xbc <__bad_interrupt>
  12:	00 00       	nop
  14:	53 c0       	rjmp	.+166    	; 0xbc <__bad_interrupt>
  16:	00 00       	nop
  18:	51 c0       	rjmp	.+162    	; 0xbc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4f c0       	rjmp	.+158    	; 0xbc <__bad_interrupt>
  1e:	00 00       	nop
  20:	4d c0       	rjmp	.+154    	; 0xbc <__bad_interrupt>
  22:	00 00       	nop
  24:	4b c0       	rjmp	.+150    	; 0xbc <__bad_interrupt>
  26:	00 00       	nop
  28:	49 c0       	rjmp	.+146    	; 0xbc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	47 c0       	rjmp	.+142    	; 0xbc <__bad_interrupt>
  2e:	00 00       	nop
  30:	45 c0       	rjmp	.+138    	; 0xbc <__bad_interrupt>
  32:	00 00       	nop
  34:	43 c0       	rjmp	.+134    	; 0xbc <__bad_interrupt>
  36:	00 00       	nop
  38:	41 c0       	rjmp	.+130    	; 0xbc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3f c0       	rjmp	.+126    	; 0xbc <__bad_interrupt>
  3e:	00 00       	nop
  40:	3d c0       	rjmp	.+122    	; 0xbc <__bad_interrupt>
  42:	00 00       	nop
  44:	3b c0       	rjmp	.+118    	; 0xbc <__bad_interrupt>
  46:	00 00       	nop
  48:	39 c0       	rjmp	.+114    	; 0xbc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	37 c0       	rjmp	.+110    	; 0xbc <__bad_interrupt>
  4e:	00 00       	nop
  50:	35 c0       	rjmp	.+106    	; 0xbc <__bad_interrupt>
  52:	00 00       	nop
  54:	33 c0       	rjmp	.+102    	; 0xbc <__bad_interrupt>
  56:	00 00       	nop
  58:	31 c0       	rjmp	.+98     	; 0xbc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2f c0       	rjmp	.+94     	; 0xbc <__bad_interrupt>
  5e:	00 00       	nop
  60:	2d c0       	rjmp	.+90     	; 0xbc <__bad_interrupt>
  62:	00 00       	nop
  64:	2b c0       	rjmp	.+86     	; 0xbc <__bad_interrupt>
  66:	00 00       	nop
  68:	29 c0       	rjmp	.+82     	; 0xbc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	27 c0       	rjmp	.+78     	; 0xbc <__bad_interrupt>
  6e:	00 00       	nop
  70:	25 c0       	rjmp	.+74     	; 0xbc <__bad_interrupt>
  72:	00 00       	nop
  74:	23 c0       	rjmp	.+70     	; 0xbc <__bad_interrupt>
  76:	00 00       	nop
  78:	21 c0       	rjmp	.+66     	; 0xbc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1f c0       	rjmp	.+62     	; 0xbc <__bad_interrupt>
  7e:	00 00       	nop
  80:	1d c0       	rjmp	.+58     	; 0xbc <__bad_interrupt>
  82:	00 00       	nop
  84:	1b c0       	rjmp	.+54     	; 0xbc <__bad_interrupt>
  86:	00 00       	nop
  88:	19 c0       	rjmp	.+50     	; 0xbc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	17 c0       	rjmp	.+46     	; 0xbc <__bad_interrupt>
  8e:	00 00       	nop
  90:	15 c0       	rjmp	.+42     	; 0xbc <__bad_interrupt>
  92:	00 00       	nop
  94:	13 c0       	rjmp	.+38     	; 0xbc <__bad_interrupt>
  96:	00 00       	nop
  98:	11 c0       	rjmp	.+34     	; 0xbc <__bad_interrupt>
  9a:	00 00       	nop
  9c:	0f c0       	rjmp	.+30     	; 0xbc <__bad_interrupt>
  9e:	00 00       	nop
  a0:	0d c0       	rjmp	.+26     	; 0xbc <__bad_interrupt>
  a2:	00 00       	nop
  a4:	0b c0       	rjmp	.+22     	; 0xbc <__bad_interrupt>
  a6:	00 00       	nop
  a8:	09 c0       	rjmp	.+18     	; 0xbc <__bad_interrupt>
	...

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	02 d0       	rcall	.+4      	; 0xbe <main>
  ba:	01 c1       	rjmp	.+514    	; 0x2be <_exit>

000000bc <__bad_interrupt>:
  bc:	a1 cf       	rjmp	.-190    	; 0x0 <__vectors>

000000be <main>:

int main(void)
{
    /* Replace with your application code */
	volatile uint8_t retval; 
	spi_init();
  be:	e4 d0       	rcall	.+456    	; 0x288 <spi_init>
	
	fram_id();
  c0:	21 d0       	rcall	.+66     	; 0x104 <fram_id>
	fram_WREN();
  c2:	ab d0       	rcall	.+342    	; 0x21a <fram_WREN>
  c4:	97 d0       	rcall	.+302    	; 0x1f4 <fram_status>
	fram_status();
  c6:	65 e4       	ldi	r22, 0x45	; 69
	fram_writeByte(0x01ff, 0x45);
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	c8 d0       	rcall	.+400    	; 0x25e <fram_writeByte>
	fram_status();
  ce:	92 d0       	rcall	.+292    	; 0x1f4 <fram_status>
  d0:	91 d0       	rcall	.+290    	; 0x1f4 <fram_status>
	//fram_WRDI();
	fram_status();
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	91 e0       	ldi	r25, 0x01	; 1
	fram_readByte(0x01ff);
  d6:	b2 d0       	rcall	.+356    	; 0x23c <fram_readByte>
  d8:	c0 e0       	ldi	r28, 0x00	; 0
  da:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(uint16_t i = 0; i < FRAM_SIZE;i++){
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <main+0x28>
  de:	6a ea       	ldi	r22, 0xAA	; 170
  e0:	ce 01       	movw	r24, r28
		fram_writeByte(i, 0xAA);
  e2:	bd d0       	rcall	.+378    	; 0x25e <fram_writeByte>
  e4:	21 96       	adiw	r28, 0x01	; 1
  e6:	c1 15       	cp	r28, r1
  e8:	80 e2       	ldi	r24, 0x20	; 32
	fram_status();
	//fram_WRDI();
	fram_status();
	fram_readByte(0x01ff);
	
	for(uint16_t i = 0; i < FRAM_SIZE;i++){
  ea:	d8 07       	cpc	r29, r24
  ec:	c0 f3       	brcs	.-16     	; 0xde <main+0x20>
  ee:	c0 e0       	ldi	r28, 0x00	; 0
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	03 c0       	rjmp	.+6      	; 0xfa <main+0x3c>
  f4:	ce 01       	movw	r24, r28
  f6:	a2 d0       	rcall	.+324    	; 0x23c <fram_readByte>
		fram_writeByte(i, 0xAA);
	}
	
	for(uint16_t i = 0; i < FRAM_SIZE;i++){
		fram_readByte(i);
  f8:	21 96       	adiw	r28, 0x01	; 1
  fa:	c1 15       	cp	r28, r1
  fc:	80 e2       	ldi	r24, 0x20	; 32
	
	for(uint16_t i = 0; i < FRAM_SIZE;i++){
		fram_writeByte(i, 0xAA);
	}
	
	for(uint16_t i = 0; i < FRAM_SIZE;i++){
  fe:	d8 07       	cpc	r29, r24
 100:	c8 f3       	brcs	.-14     	; 0xf4 <main+0x36>
 102:	ff cf       	rjmp	.-2      	; 0x102 <main+0x44>

00000104 <fram_id>:
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <fram_id+0x6>
	volatile uint8_t retval = 0;
	spi_CSLOW();
	retval = spi_send(FRAM_WRDI);
	spi_CSHIGH();
	return retval;
}
 10a:	00 d0       	rcall	.+0      	; 0x10c <fram_id+0x8>
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	1a 82       	std	Y+2, r1	; 0x02
 114:	1b 82       	std	Y+3, r1	; 0x03
 116:	1c 82       	std	Y+4, r1	; 0x04
 118:	1d 82       	std	Y+5, r1	; 0x05
 11a:	c9 d0       	rcall	.+402    	; 0x2ae <spi_CSLOW>
 11c:	8f e9       	ldi	r24, 0x9F	; 159
 11e:	c1 d0       	rcall	.+386    	; 0x2a2 <spi_send>
 120:	89 83       	std	Y+1, r24	; 0x01
 122:	8f e9       	ldi	r24, 0x9F	; 159
 124:	be d0       	rcall	.+380    	; 0x2a2 <spi_send>
 126:	89 83       	std	Y+1, r24	; 0x01
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	a0 e0       	ldi	r26, 0x00	; 0
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	b8 2f       	mov	r27, r24
 132:	aa 27       	eor	r26, r26
 134:	99 27       	eor	r25, r25
 136:	88 27       	eor	r24, r24
 138:	4a 81       	ldd	r20, Y+2	; 0x02
 13a:	5b 81       	ldd	r21, Y+3	; 0x03
 13c:	6c 81       	ldd	r22, Y+4	; 0x04
 13e:	7d 81       	ldd	r23, Y+5	; 0x05
 140:	84 2b       	or	r24, r20
 142:	95 2b       	or	r25, r21
 144:	a6 2b       	or	r26, r22
 146:	b7 2b       	or	r27, r23
 148:	8a 83       	std	Y+2, r24	; 0x02
 14a:	9b 83       	std	Y+3, r25	; 0x03
 14c:	ac 83       	std	Y+4, r26	; 0x04
 14e:	bd 83       	std	Y+5, r27	; 0x05
 150:	8f e9       	ldi	r24, 0x9F	; 159
 152:	a7 d0       	rcall	.+334    	; 0x2a2 <spi_send>
 154:	89 83       	std	Y+1, r24	; 0x01
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	a0 e0       	ldi	r26, 0x00	; 0
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	dc 01       	movw	r26, r24
 160:	99 27       	eor	r25, r25
 162:	88 27       	eor	r24, r24
 164:	4a 81       	ldd	r20, Y+2	; 0x02
 166:	5b 81       	ldd	r21, Y+3	; 0x03
 168:	6c 81       	ldd	r22, Y+4	; 0x04
 16a:	7d 81       	ldd	r23, Y+5	; 0x05
 16c:	84 2b       	or	r24, r20
 16e:	95 2b       	or	r25, r21
 170:	a6 2b       	or	r26, r22
 172:	b7 2b       	or	r27, r23
 174:	8a 83       	std	Y+2, r24	; 0x02
 176:	9b 83       	std	Y+3, r25	; 0x03
 178:	ac 83       	std	Y+4, r26	; 0x04
 17a:	bd 83       	std	Y+5, r27	; 0x05
 17c:	8f e9       	ldi	r24, 0x9F	; 159
 17e:	91 d0       	rcall	.+290    	; 0x2a2 <spi_send>
 180:	89 83       	std	Y+1, r24	; 0x01
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	98 2f       	mov	r25, r24
 188:	88 27       	eor	r24, r24
 18a:	4a 81       	ldd	r20, Y+2	; 0x02
 18c:	5b 81       	ldd	r21, Y+3	; 0x03
 18e:	6c 81       	ldd	r22, Y+4	; 0x04
 190:	7d 81       	ldd	r23, Y+5	; 0x05
 192:	09 2e       	mov	r0, r25
 194:	00 0c       	add	r0, r0
 196:	aa 0b       	sbc	r26, r26
 198:	bb 0b       	sbc	r27, r27
 19a:	84 2b       	or	r24, r20
 19c:	95 2b       	or	r25, r21
 19e:	a6 2b       	or	r26, r22
 1a0:	b7 2b       	or	r27, r23
 1a2:	8a 83       	std	Y+2, r24	; 0x02
 1a4:	9b 83       	std	Y+3, r25	; 0x03
 1a6:	ac 83       	std	Y+4, r26	; 0x04
 1a8:	bd 83       	std	Y+5, r27	; 0x05
 1aa:	8f e9       	ldi	r24, 0x9F	; 159
 1ac:	7a d0       	rcall	.+244    	; 0x2a2 <spi_send>
 1ae:	89 83       	std	Y+1, r24	; 0x01
 1b0:	29 81       	ldd	r18, Y+1	; 0x01
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	9b 81       	ldd	r25, Y+3	; 0x03
 1b6:	ac 81       	ldd	r26, Y+4	; 0x04
 1b8:	bd 81       	ldd	r27, Y+5	; 0x05
 1ba:	82 2b       	or	r24, r18
 1bc:	8a 83       	std	Y+2, r24	; 0x02
 1be:	9b 83       	std	Y+3, r25	; 0x03
 1c0:	ac 83       	std	Y+4, r26	; 0x04
 1c2:	bd 83       	std	Y+5, r27	; 0x05
 1c4:	8f e9       	ldi	r24, 0x9F	; 159
 1c6:	6d d0       	rcall	.+218    	; 0x2a2 <spi_send>
 1c8:	89 83       	std	Y+1, r24	; 0x01
 1ca:	75 d0       	rcall	.+234    	; 0x2b6 <spi_CSHIGH>
 1cc:	8a 81       	ldd	r24, Y+2	; 0x02
 1ce:	9b 81       	ldd	r25, Y+3	; 0x03
 1d0:	ac 81       	ldd	r26, Y+4	; 0x04
 1d2:	bd 81       	ldd	r27, Y+5	; 0x05
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	93 40       	sbci	r25, 0x03	; 3
 1d8:	af 47       	sbci	r26, 0x7F	; 127
 1da:	b4 40       	sbci	r27, 0x04	; 4
 1dc:	11 f4       	brne	.+4      	; 0x1e2 <fram_id+0xde>
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <fram_id+0xe0>
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <fram_status>:
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	1f 92       	push	r1
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
 1fe:	19 82       	std	Y+1, r1	; 0x01
 200:	56 d0       	rcall	.+172    	; 0x2ae <spi_CSLOW>
 202:	85 e0       	ldi	r24, 0x05	; 5
 204:	4e d0       	rcall	.+156    	; 0x2a2 <spi_send>
 206:	89 83       	std	Y+1, r24	; 0x01
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	4b d0       	rcall	.+150    	; 0x2a2 <spi_send>
 20c:	89 83       	std	Y+1, r24	; 0x01
 20e:	53 d0       	rcall	.+166    	; 0x2b6 <spi_CSHIGH>
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	0f 90       	pop	r0
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <fram_WREN>:
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	1f 92       	push	r1
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
 224:	19 82       	std	Y+1, r1	; 0x01
 226:	43 d0       	rcall	.+134    	; 0x2ae <spi_CSLOW>
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	3b d0       	rcall	.+118    	; 0x2a2 <spi_send>
 22c:	89 83       	std	Y+1, r24	; 0x01
 22e:	43 d0       	rcall	.+134    	; 0x2b6 <spi_CSHIGH>
 230:	3e d0       	rcall	.+124    	; 0x2ae <spi_CSLOW>
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	0f 90       	pop	r0
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <fram_readByte>:

/* NEEDS WORK */
uint8_t fram_readByte(uint16_t address){
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	c8 2f       	mov	r28, r24
 242:	d9 2f       	mov	r29, r25
	uint8_t retval = 0;
		spi_CSLOW();
 244:	34 d0       	rcall	.+104    	; 0x2ae <spi_CSLOW>
		//spi_send(FRAM_WRDI);
		spi_send(FRAM_READ);
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	2c d0       	rcall	.+88     	; 0x2a2 <spi_send>
		//Address is 16bits long
		spi_send((address >> 8));
 24a:	8d 2f       	mov	r24, r29
 24c:	2a d0       	rcall	.+84     	; 0x2a2 <spi_send>
		spi_send(address);
 24e:	8c 2f       	mov	r24, r28
		retval = spi_send(SPI_DUMMY);
 250:	28 d0       	rcall	.+80     	; 0x2a2 <spi_send>
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	26 d0       	rcall	.+76     	; 0x2a2 <spi_send>
		spi_CSHIGH();
 256:	2f d0       	rcall	.+94     	; 0x2b6 <spi_CSHIGH>
 258:	df 91       	pop	r29
	
}
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <fram_writeByte>:
 25e:	1f 93       	push	r17

/* NEEDS WORK */
uint8_t fram_writeByte(uint16_t address, uint8_t udata)
{
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	d8 2f       	mov	r29, r24
 266:	19 2f       	mov	r17, r25
 268:	c6 2f       	mov	r28, r22
	uint8_t retval = 0;
	spi_CSLOW();
 26a:	21 d0       	rcall	.+66     	; 0x2ae <spi_CSLOW>
		retval = fram_WREN();
 26c:	d6 df       	rcall	.-84     	; 0x21a <fram_WREN>
			spi_send(FRAM_WRITE);
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	18 d0       	rcall	.+48     	; 0x2a2 <spi_send>
			spi_send((address >> 8));
 272:	81 2f       	mov	r24, r17
 274:	16 d0       	rcall	.+44     	; 0x2a2 <spi_send>
			spi_send(address);
 276:	8d 2f       	mov	r24, r29
 278:	14 d0       	rcall	.+40     	; 0x2a2 <spi_send>
			spi_send(udata);
 27a:	8c 2f       	mov	r24, r28
 27c:	12 d0       	rcall	.+36     	; 0x2a2 <spi_send>
 27e:	1b d0       	rcall	.+54     	; 0x2b6 <spi_CSHIGH>
	spi_CSHIGH();		
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
}
 284:	1f 91       	pop	r17
 286:	08 95       	ret

00000288 <spi_init>:
 288:	84 b1       	in	r24, 0x04	; 4
 28a:	86 62       	ori	r24, 0x26	; 38
 */ 
#include "spi.h"

uint8_t spi_init(void){
	/* MOSI = OUTPUT, MISO = OUTPUT, SCK = OUTPUT */
	 SPI_DDR |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_CS); 
 28c:	84 b9       	out	0x04, r24	; 4
	 SPI_DDR &= ~(1 << SPI_MISO);
 28e:	84 b1       	in	r24, 0x04	; 4
 290:	87 7f       	andi	r24, 0xF7	; 247
 292:	84 b9       	out	0x04, r24	; 4
	 /* Enable SPI, Master Mode, Set Clock */
	 SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0); 
 294:	8c b5       	in	r24, 0x2c	; 44
 296:	81 65       	ori	r24, 0x51	; 81
 298:	8c bd       	out	0x2c, r24	; 44
	 SPI_PORT |= (1 << SPI_CS);
 29a:	85 b1       	in	r24, 0x05	; 5
 29c:	80 62       	ori	r24, 0x20	; 32
 29e:	85 b9       	out	0x05, r24	; 5
}
 2a0:	08 95       	ret

000002a2 <spi_send>:

uint8_t spi_send(uint8_t udata){
	SPDR = udata;
 2a2:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF)))
 2a4:	0d b4       	in	r0, 0x2d	; 45
 2a6:	07 fe       	sbrs	r0, 7
 2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <spi_send+0x2>
		;
	return SPDR;
 2aa:	8e b5       	in	r24, 0x2e	; 46
}
 2ac:	08 95       	ret

000002ae <spi_CSLOW>:

void spi_CSLOW(void){
	SPI_PORT &= ~(1 << SPI_CS);
 2ae:	85 b1       	in	r24, 0x05	; 5
 2b0:	8f 7d       	andi	r24, 0xDF	; 223
 2b2:	85 b9       	out	0x05, r24	; 5
 2b4:	08 95       	ret

000002b6 <spi_CSHIGH>:
}

void spi_CSHIGH(void){
	SPI_PORT |= (1 << SPI_CS);
 2b6:	85 b1       	in	r24, 0x05	; 5
 2b8:	80 62       	ori	r24, 0x20	; 32
 2ba:	85 b9       	out	0x05, r24	; 5
 2bc:	08 95       	ret

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
