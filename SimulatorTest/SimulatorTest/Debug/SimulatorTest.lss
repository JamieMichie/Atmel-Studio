
SimulatorTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000242  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  000002b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000328  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dd2  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c6a  00000000  00000000  0000114a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000451  00000000  00000000  00001db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00002208  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000579  00000000  00000000  0000226c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b6  00000000  00000000  000027e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000289b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 30       	cpi	r26, 0x02	; 2
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	43 d0       	rcall	.+134    	; 0x18c <main>
 106:	9b c0       	rjmp	.+310    	; 0x23e <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <uart_init>:
void uart_init(uint16_t BAUDRATE); 
void uart_putc(const char cdata);

uint8_t *u8p; //Utility pointer

void uart_init(uint16_t BAUDRATE){
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	1f 92       	push	r1
 110:	1f 92       	push	r1
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
	
	volatile uint16_t UBVAL = (((F_CPU / (BAUDRATE * 16UL)) - 1));
 116:	a0 e0       	ldi	r26, 0x00	; 0
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	aa 1f       	adc	r26, r26
 120:	bb 1f       	adc	r27, r27
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	aa 1f       	adc	r26, r26
 128:	bb 1f       	adc	r27, r27
 12a:	9c 01       	movw	r18, r24
 12c:	ad 01       	movw	r20, r26
 12e:	22 0f       	add	r18, r18
 130:	33 1f       	adc	r19, r19
 132:	44 1f       	adc	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	22 0f       	add	r18, r18
 138:	33 1f       	adc	r19, r19
 13a:	44 1f       	adc	r20, r20
 13c:	55 1f       	adc	r21, r21
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	74 e2       	ldi	r23, 0x24	; 36
 142:	84 ef       	ldi	r24, 0xF4	; 244
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	47 d0       	rcall	.+142    	; 0x1d6 <__udivmodsi4>
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	31 09       	sbc	r19, r1
 14c:	3a 83       	std	Y+2, r19	; 0x02
 14e:	29 83       	std	Y+1, r18	; 0x01
	UBRR0H = (UBVAL >> 8);
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	9a 81       	ldd	r25, Y+2	; 0x02
 154:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (UBVAL);
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	9a 81       	ldd	r25, Y+2	; 0x02
 15c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 160:	e1 ec       	ldi	r30, 0xC1	; 193
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	88 61       	ori	r24, 0x18	; 24
 168:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 16a:	e2 ec       	ldi	r30, 0xC2	; 194
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	86 60       	ori	r24, 0x06	; 6
 172:	80 83       	st	Z, r24
}
 174:	0f 90       	pop	r0
 176:	0f 90       	pop	r0
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <uart_putc>:

void uart_putc(const char cdata){
	/* Wait for empty transmit buffer */
	while(!(UCSR0A & (1<<UDRE0)))
 17e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 182:	95 ff       	sbrs	r25, 5
 184:	fc cf       	rjmp	.-8      	; 0x17e <uart_putc>
	;
	/*Put data into the buffer and send */
	UDR0 = cdata;
 186:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 18a:	08 95       	ret

0000018c <main>:
}

int main(void)
{
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	1f 92       	push	r1
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	DDRB |= (1 << PB1);
 196:	84 b1       	in	r24, 0x04	; 4
 198:	82 60       	ori	r24, 0x02	; 2
 19a:	84 b9       	out	0x04, r24	; 4
	uart_init(9600);
 19c:	80 e8       	ldi	r24, 0x80	; 128
 19e:	95 e2       	ldi	r25, 0x25	; 37
 1a0:	b4 df       	rcall	.-152    	; 0x10a <uart_init>
	uart_putc('J');
 1a2:	8a e4       	ldi	r24, 0x4A	; 74
 1a4:	ec df       	rcall	.-40     	; 0x17e <uart_putc>
	
	for(uint8_t i = 0; i < 255; i++){
 1a6:	19 82       	std	Y+1, r1	; 0x01
 1a8:	0e c0       	rjmp	.+28     	; 0x1c6 <main+0x3a>
		u8p = &i;
 1aa:	9e 01       	movw	r18, r28
 1ac:	2f 5f       	subi	r18, 0xFF	; 255
 1ae:	3f 4f       	sbci	r19, 0xFF	; 255
 1b0:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1b4:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
		eeprom_update_byte(*u8p, (i + 0x30));
 1b8:	60 e3       	ldi	r22, 0x30	; 48
 1ba:	68 0f       	add	r22, r24
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	2d d0       	rcall	.+90     	; 0x21a <eeprom_update_byte>
    /* Replace with your application code */
	DDRB |= (1 << PB1);
	uart_init(9600);
	uart_putc('J');
	
	for(uint8_t i = 0; i < 255; i++){
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	89 83       	std	Y+1, r24	; 0x01
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	8f 3f       	cpi	r24, 0xFF	; 255
 1ca:	79 f7       	brne	.-34     	; 0x1aa <main+0x1e>
		eeprom_update_byte(*u8p, (i + 0x30));
	}
	
    while (1) 
    {
		PORTB ^= (1 << PB1);
 1cc:	95 b1       	in	r25, 0x05	; 5
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	89 27       	eor	r24, r25
 1d2:	85 b9       	out	0x05, r24	; 5
 1d4:	fb cf       	rjmp	.-10     	; 0x1cc <main+0x40>

000001d6 <__udivmodsi4>:
 1d6:	a1 e2       	ldi	r26, 0x21	; 33
 1d8:	1a 2e       	mov	r1, r26
 1da:	aa 1b       	sub	r26, r26
 1dc:	bb 1b       	sub	r27, r27
 1de:	fd 01       	movw	r30, r26
 1e0:	0d c0       	rjmp	.+26     	; 0x1fc <__udivmodsi4_ep>

000001e2 <__udivmodsi4_loop>:
 1e2:	aa 1f       	adc	r26, r26
 1e4:	bb 1f       	adc	r27, r27
 1e6:	ee 1f       	adc	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	a2 17       	cp	r26, r18
 1ec:	b3 07       	cpc	r27, r19
 1ee:	e4 07       	cpc	r30, r20
 1f0:	f5 07       	cpc	r31, r21
 1f2:	20 f0       	brcs	.+8      	; 0x1fc <__udivmodsi4_ep>
 1f4:	a2 1b       	sub	r26, r18
 1f6:	b3 0b       	sbc	r27, r19
 1f8:	e4 0b       	sbc	r30, r20
 1fa:	f5 0b       	sbc	r31, r21

000001fc <__udivmodsi4_ep>:
 1fc:	66 1f       	adc	r22, r22
 1fe:	77 1f       	adc	r23, r23
 200:	88 1f       	adc	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	1a 94       	dec	r1
 206:	69 f7       	brne	.-38     	; 0x1e2 <__udivmodsi4_loop>
 208:	60 95       	com	r22
 20a:	70 95       	com	r23
 20c:	80 95       	com	r24
 20e:	90 95       	com	r25
 210:	9b 01       	movw	r18, r22
 212:	ac 01       	movw	r20, r24
 214:	bd 01       	movw	r22, r26
 216:	cf 01       	movw	r24, r30
 218:	08 95       	ret

0000021a <eeprom_update_byte>:
 21a:	26 2f       	mov	r18, r22

0000021c <eeprom_update_r18>:
 21c:	f9 99       	sbic	0x1f, 1	; 31
 21e:	fe cf       	rjmp	.-4      	; 0x21c <eeprom_update_r18>
 220:	92 bd       	out	0x22, r25	; 34
 222:	81 bd       	out	0x21, r24	; 33
 224:	f8 9a       	sbi	0x1f, 0	; 31
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	00 b4       	in	r0, 0x20	; 32
 22a:	02 16       	cp	r0, r18
 22c:	39 f0       	breq	.+14     	; 0x23c <eeprom_update_r18+0x20>
 22e:	1f ba       	out	0x1f, r1	; 31
 230:	20 bd       	out	0x20, r18	; 32
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	fa 9a       	sbi	0x1f, 2	; 31
 238:	f9 9a       	sbi	0x1f, 1	; 31
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	08 95       	ret

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
